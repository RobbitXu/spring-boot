<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--日志上下文-->
    <contextName>spring-boot</contextName>
    <!--日记文件路径-->
    <property name="log.path" value="d:/log/"/>
    <property name="logback.appname" value="spring-boot"/>


    <!--控制台输出-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
            </pattern>
        </layout>
        <!--ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志-->
        <!--
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>-->
    </appender>

    <!--日志文件输出-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <!--
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            过滤 Error
            <level>ERROR</level>
            匹配到就禁止
            <onMatch>DENY</onMatch>
            没有匹配到就允许
            <onMismatch>ACCEPT</onMismatch>
        </filter>-->

        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
        <File>${log.path}/${logback.appname}.log</File>

        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <fileNamePattern>${log.path}/${logback.appname}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--只保留最近60天的日志-->
            <maxHistory>60</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <totalSizeCap>30GB</totalSizeCap>
            <MaxFileSize>200MB</MaxFileSize>
        </rollingPolicy>


        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--<FileNamePattern>${logback.path}/info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>-->
        <!--<maxHistory>60</maxHistory>-->
        <!--<totalSizeCap>1GB</totalSizeCap>-->
        <!--</rollingPolicy>-->


        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
            <!--<MaxFileSize>1MB</MaxFileSize>-->
        <!--</triggeringPolicy>-->
    </appender>

    <!--additivity 默认为true，将此loger的打印信息向上级传递
        设置appender，此loger本身不打印任何信息
        -->
    <!--
    <logger name="com.apache.ibatis" level="TRACE" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>-->

    <!--myibatis log configure-->
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>
    <logger name="com.alibaba.dubbo" level="DEBUG"/>

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>


    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <!--
    <springProfile name="test,dev">
        <logger name="com.example.demo.controller" level="DEBUG" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
    </springProfile>-->

    <!-- 生产环境. -->
    <!--
    <springProfile name="prod">
        <logger name="com.example.demo.controller" level="INFO" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
    </springProfile>-->

</configuration>